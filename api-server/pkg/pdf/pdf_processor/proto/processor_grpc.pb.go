// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/processor.proto

package pdf_processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PDFProcessor_ProcessDocument_FullMethodName    = "/pdf_processor.PDFProcessor/ProcessDocument"
	PDFProcessor_GetStatus_FullMethodName          = "/pdf_processor.PDFProcessor/GetStatus"
	PDFProcessor_StreamPIIDetection_FullMethodName = "/pdf_processor.PDFProcessor/StreamPIIDetection"
)

// PDFProcessorClient is the client API for PDFProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PDFProcessorClient interface {
	// Process a PDF document
	ProcessDocument(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	// Get processing status
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Stream PII detection results
	StreamPIIDetection(ctx context.Context, in *DocumentStream, opts ...grpc.CallOption) (PDFProcessor_StreamPIIDetectionClient, error)
}

type pDFProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewPDFProcessorClient(cc grpc.ClientConnInterface) PDFProcessorClient {
	return &pDFProcessorClient{cc}
}

func (c *pDFProcessorClient) ProcessDocument(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, PDFProcessor_ProcessDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDFProcessorClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PDFProcessor_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pDFProcessorClient) StreamPIIDetection(ctx context.Context, in *DocumentStream, opts ...grpc.CallOption) (PDFProcessor_StreamPIIDetectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PDFProcessor_ServiceDesc.Streams[0], PDFProcessor_StreamPIIDetection_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pDFProcessorStreamPIIDetectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PDFProcessor_StreamPIIDetectionClient interface {
	Recv() (*PIIDetectionResult, error)
	grpc.ClientStream
}

type pDFProcessorStreamPIIDetectionClient struct {
	grpc.ClientStream
}

func (x *pDFProcessorStreamPIIDetectionClient) Recv() (*PIIDetectionResult, error) {
	m := new(PIIDetectionResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PDFProcessorServer is the server API for PDFProcessor service.
// All implementations must embed UnimplementedPDFProcessorServer
// for forward compatibility
type PDFProcessorServer interface {
	// Process a PDF document
	ProcessDocument(context.Context, *ProcessRequest) (*ProcessResponse, error)
	// Get processing status
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	// Stream PII detection results
	StreamPIIDetection(*DocumentStream, PDFProcessor_StreamPIIDetectionServer) error
	mustEmbedUnimplementedPDFProcessorServer()
}

// UnimplementedPDFProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedPDFProcessorServer struct {
}

func (UnimplementedPDFProcessorServer) ProcessDocument(context.Context, *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocument not implemented")
}
func (UnimplementedPDFProcessorServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedPDFProcessorServer) StreamPIIDetection(*DocumentStream, PDFProcessor_StreamPIIDetectionServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPIIDetection not implemented")
}
func (UnimplementedPDFProcessorServer) mustEmbedUnimplementedPDFProcessorServer() {}

// UnsafePDFProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PDFProcessorServer will
// result in compilation errors.
type UnsafePDFProcessorServer interface {
	mustEmbedUnimplementedPDFProcessorServer()
}

func RegisterPDFProcessorServer(s grpc.ServiceRegistrar, srv PDFProcessorServer) {
	s.RegisterService(&PDFProcessor_ServiceDesc, srv)
}

func _PDFProcessor_ProcessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFProcessorServer).ProcessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFProcessor_ProcessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFProcessorServer).ProcessDocument(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDFProcessor_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFProcessorServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PDFProcessor_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFProcessorServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PDFProcessor_StreamPIIDetection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DocumentStream)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PDFProcessorServer).StreamPIIDetection(m, &pDFProcessorStreamPIIDetectionServer{stream})
}

type PDFProcessor_StreamPIIDetectionServer interface {
	Send(*PIIDetectionResult) error
	grpc.ServerStream
}

type pDFProcessorStreamPIIDetectionServer struct {
	grpc.ServerStream
}

func (x *pDFProcessorStreamPIIDetectionServer) Send(m *PIIDetectionResult) error {
	return x.ServerStream.SendMsg(m)
}

// PDFProcessor_ServiceDesc is the grpc.ServiceDesc for PDFProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PDFProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pdf_processor.PDFProcessor",
	HandlerType: (*PDFProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessDocument",
			Handler:    _PDFProcessor_ProcessDocument_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _PDFProcessor_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPIIDetection",
			Handler:       _PDFProcessor_StreamPIIDetection_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/processor.proto",
}
